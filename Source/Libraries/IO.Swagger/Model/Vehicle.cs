/* 
 * Amadeus Travel Innovation Sandbox
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Vehicle
    /// </summary>
    [DataContract]
    public partial class Vehicle :  IEquatable<Vehicle>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Vehicle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        /// <param name="VehicleInfo">More information about the type of vehicle on offer. (required).</param>
        /// <param name="Rates">Rates that will be applied during the duration of the car rental requested. These rates are generally not inclusive of tax and are used by the car rental company to compute the total cost at the end of the rental period..</param>
        /// <param name="EstimatedTotal">The estimated total cost of the rental given the rental period and location provided, including all mandatory taxes and charges, and using a default set of rental options and restrictions defined by the car company..</param>
        /// <param name="Image">An image to give an indication of what to expect when renting this vehicle..</param>
        public Vehicle(VehicleInfo VehicleInfo = null, List<Rate> Rates = null, Amount EstimatedTotal = null, Image Image = null)
        {
            // to ensure "VehicleInfo" is required (not null)
            if (VehicleInfo == null)
            {
                throw new InvalidDataException("VehicleInfo is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.VehicleInfo = VehicleInfo;
            }
            this.Rates = Rates;
            this.EstimatedTotal = EstimatedTotal;
            this.Image = Image;
        }
        
        /// <summary>
        /// More information about the type of vehicle on offer.
        /// </summary>
        /// <value>More information about the type of vehicle on offer.</value>
        [DataMember(Name="vehicle_info", EmitDefaultValue=false)]
        public VehicleInfo VehicleInfo { get; set; }
        /// <summary>
        /// Rates that will be applied during the duration of the car rental requested. These rates are generally not inclusive of tax and are used by the car rental company to compute the total cost at the end of the rental period.
        /// </summary>
        /// <value>Rates that will be applied during the duration of the car rental requested. These rates are generally not inclusive of tax and are used by the car rental company to compute the total cost at the end of the rental period.</value>
        [DataMember(Name="rates", EmitDefaultValue=false)]
        public List<Rate> Rates { get; set; }
        /// <summary>
        /// The estimated total cost of the rental given the rental period and location provided, including all mandatory taxes and charges, and using a default set of rental options and restrictions defined by the car company.
        /// </summary>
        /// <value>The estimated total cost of the rental given the rental period and location provided, including all mandatory taxes and charges, and using a default set of rental options and restrictions defined by the car company.</value>
        [DataMember(Name="estimated_total", EmitDefaultValue=false)]
        public Amount EstimatedTotal { get; set; }
        /// <summary>
        /// An image to give an indication of what to expect when renting this vehicle.
        /// </summary>
        /// <value>An image to give an indication of what to expect when renting this vehicle.</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public Image Image { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Vehicle {\n");
            sb.Append("  VehicleInfo: ").Append(VehicleInfo).Append("\n");
            sb.Append("  Rates: ").Append(Rates).Append("\n");
            sb.Append("  EstimatedTotal: ").Append(EstimatedTotal).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Vehicle);
        }

        /// <summary>
        /// Returns true if Vehicle instances are equal
        /// </summary>
        /// <param name="other">Instance of Vehicle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vehicle other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.VehicleInfo == other.VehicleInfo ||
                    this.VehicleInfo != null &&
                    this.VehicleInfo.Equals(other.VehicleInfo)
                ) && 
                (
                    this.Rates == other.Rates ||
                    this.Rates != null &&
                    this.Rates.SequenceEqual(other.Rates)
                ) && 
                (
                    this.EstimatedTotal == other.EstimatedTotal ||
                    this.EstimatedTotal != null &&
                    this.EstimatedTotal.Equals(other.EstimatedTotal)
                ) && 
                (
                    this.Image == other.Image ||
                    this.Image != null &&
                    this.Image.Equals(other.Image)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.VehicleInfo != null)
                    hash = hash * 59 + this.VehicleInfo.GetHashCode();
                if (this.Rates != null)
                    hash = hash * 59 + this.Rates.GetHashCode();
                if (this.EstimatedTotal != null)
                    hash = hash * 59 + this.EstimatedTotal.GetHashCode();
                if (this.Image != null)
                    hash = hash * 59 + this.Image.GetHashCode();
                return hash;
            }
        }
    }

}
